apiVersion: apps/v1
kind: Deployment
metadata:
   labels:
      app: cart-service
      in-service: "true"
   name: cart-service
spec:
   minReadySeconds: 10
   revisionHistoryLimit: 10
   selector:
      matchLabels:
         app: cart-service
         in-service: "true"
   strategy:
      rollingUpdate:
         maxSurge: 50%
         maxUnavailable: 20%
      type: RollingUpdate
   template:
      metadata:
         labels:
            app: cart-service
            in-service: "true"
      spec:
         containers:
         -  env: null
            envFrom:
            -  configMapRef:
                  name: cart-service-configs
            image: 812436859307.dkr.ecr.us-west-2.amazonaws.com/services/tcp_cart_service:$IMAGE_TAG
            imagePullPolicy: IfNotPresent
            name: cart-service
            ports:
            -  containerPort: 9001
               name: app-port
               protocol: TCP
            livenessProbe:
               failureThreshold: 5
               httpGet:
                  path: /api/stateful/cart/v1/actuator/health
                  port: 9001
                  scheme: HTTP
               initialDelaySeconds: 30
               periodSeconds: 5
               successThreshold: 1
               timeoutSeconds: 5
            readinessProbe:
               failureThreshold: 3
               httpGet:
                  path: /api/stateful/cart/v1/actuator/health
                  port: 9001
                  scheme: HTTP
               initialDelaySeconds: 30
               periodSeconds: 5
               successThreshold: 1
               timeoutSeconds: 5
            resources:
               limits:
                  cpu: "2"
                  memory: 2Gi
               requests:
                  cpu: "500m"
                  memory: 2Gi
         nodeSelector:
            ENV: edd
         dnsPolicy: ClusterFirst
         restartPolicy: Always
         schedulerName: default-scheduler
         securityContext: {}
         terminationGracePeriodSeconds: 30